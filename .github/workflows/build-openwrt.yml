name: Build OpenWrt

on:
  repository_dispatch:
  watch: 
    types: started

env:
  REPO_URL: https://github.com/whfweb/openwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/ssr.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  ssh: true
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get update -qq
        sudo apt-get install -qq $(curl -fsSL https://raw.githubusercontent.com/P3TERX/Actions-OpenWrt/main/depends-ubuntu-latest)
        sudo apt-get autoremove --purge -qq
        sudo apt-get clean -qq
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --single-branch --branch "$REPO_BRANCH" "$REPO_URL" openwrt
        ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"

    - name: Setup feeds configuration
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH" && "./$DIY_P1_SH"

    - name: Update feeds
      working-directory: openwrt
      run: ./scripts/feeds update -a

    - name: Install feeds
      working-directory: openwrt
      run: ./scripts/feeds install -a

    - name: Apply configurations
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH" && "./$DIY_P2_SH"

    - name: SSH connection
      if: ${{ env.ssh }}
      uses: P3TERX/ssh2actions@v1.0.0
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download dependencies
      working-directory: openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -delete

    - name: Compile firmware
      id: compile
      working-directory: openwrt
      run: |
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        DEVICE_NAME="_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')"
        echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Post-build cleanup
      if: ${{ !cancelled() }}
      run: df -hT

    - name: Upload binaries
      if: ${{ steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR }}
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Prepare firmware
      id: organize
      if: ${{ env.UPLOAD_FIRMWARE && !cancelled() }}
      working-directory: openwrt/bin/targets/*/*
      run: |
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware artifacts
      if: ${{ steps.organize.outputs.status == 'success' && !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Setup transfer tool
      if: ${{ (env.UPLOAD_COWTRANSFER || env.UPLOAD_WETRANSFER) && steps.organize.outputs.status == 'success' }}
      run: curl -fsSL https://raw.githubusercontent.com/P3TERX/transfer/master/install.sh | bash

    - name: Upload to CowTransfer
      if: ${{ env.UPLOAD_COWTRANSFER && steps.organize.outputs.status == 'success' }}
      run: |
        transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} | tee cowtransfer.log
        echo "url=$(grep 'https' cowtransfer.log | cut -d' ' -f3)" >> $GITHUB_OUTPUT

    - name: Upload to WeTransfer
      if: ${{ env.UPLOAD_WETRANSFER && steps.organize.outputs.status == 'success' }}
      run: |
        transfer wet -s -p 16 --no-progress ${FIRMWARE} | tee wetransfer.log
        echo "url=$(grep 'https' wetransfer.log | cut -d' ' -f3)" >> $GITHUB_OUTPUT

    - name: Prepare release
      id: release
      if: ${{ env.UPLOAD_RELEASE && !cancelled() }}
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        {
          [ "$UPLOAD_COWTRANSFER" = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})"
          [ "$UPLOAD_WETRANSFER" = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})"
        } > release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Publish release
      if: ${{ steps.release.outputs.status == 'success' }}
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Cleanup workflows
      uses: GeekMasher/advanced-actions-cleanup@v1
      with:
        days-old: 1
        minimum-runs: 3

    - name: Cleanup releases
      if: ${{ env.UPLOAD_RELEASE }}
      uses: c-hive/gha-remove-old-release-assets@v1
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
